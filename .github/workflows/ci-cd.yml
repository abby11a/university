name: Build and Deploy App and Infrastructure

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Setup Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18' # Specify your Node.js version

    # Install dependencies
    - name: Install dependencies
      run: |
        cd test-app
        npm install

    # Generate Prisma client
    - name: Generate Prisma Client
      run: |
        cd test-app
        npx prisma generate

    # Login to Amazon ECR
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.eu-west-1.amazonaws.com

    # Build, tag, and push the Docker image to Amazon ECR
    - name: Build, tag, and push image
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.eu-west-1.amazonaws.com
        ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd test-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

    # Deploy CDK Stack
    - name: Deploy infrastructure with CDK
      run: |
        cd test-app-cdk
        npm install
        npx cdk deploy --require-approval never --context imageTag=${{ github.sha }}
